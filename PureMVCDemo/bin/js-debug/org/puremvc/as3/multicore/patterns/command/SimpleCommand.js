/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\patterns\command\SimpleCommand.as
 * org.puremvc.as3.multicore.patterns.command.SimpleCommand
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.patterns.command.SimpleCommand');

goog.require('org.puremvc.as3.multicore.patterns.observer.Notifier');
goog.require('org.puremvc.as3.multicore.interfaces.ICommand');
goog.require('org.puremvc.as3.multicore.interfaces.INotifier');
goog.require('org.apache.flex.utils.Language');



/**
 * @constructor
 * @extends {org.puremvc.as3.multicore.patterns.observer.Notifier}
 * @implements {org.puremvc.as3.multicore.interfaces.ICommand}
 * @implements {org.puremvc.as3.multicore.interfaces.INotifier}
 */
org.puremvc.as3.multicore.patterns.command.SimpleCommand = function() {
  org.puremvc.as3.multicore.patterns.command.SimpleCommand.base(this, 'constructor');
};
goog.inherits(org.puremvc.as3.multicore.patterns.command.SimpleCommand, org.puremvc.as3.multicore.patterns.observer.Notifier);


/**
 * Fulfill the use-case initiated by the given <code>INotification</code>.
 * 
 * <P>
 * In the Command Pattern, an application use-case typically
 * begins with some user action, which results in an <code>INotification</code> being broadcast, which 
 * is handled by business logic in the <code>execute</code> method of an
 * <code>ICommand</code>.</P>
 * 
 * @asparam notification the <code>INotification</code> to handle.
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.INotification} notification
 */
org.puremvc.as3.multicore.patterns.command.SimpleCommand.prototype.execute = function(notification) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.patterns.command.SimpleCommand.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'SimpleCommand', qName: 'org.puremvc.as3.multicore.patterns.command.SimpleCommand', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.ICommand, org.puremvc.as3.multicore.interfaces.INotifier] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.patterns.command.SimpleCommand', org.puremvc.as3.multicore.patterns.command.SimpleCommand);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.patterns.command.SimpleCommand.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'execute': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.command.SimpleCommand', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }}
      };
    }
  };
};