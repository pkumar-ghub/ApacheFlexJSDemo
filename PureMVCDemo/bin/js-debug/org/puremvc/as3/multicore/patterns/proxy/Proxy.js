/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\patterns\proxy\Proxy.as
 * org.puremvc.as3.multicore.patterns.proxy.Proxy
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.patterns.proxy.Proxy');

goog.require('org.puremvc.as3.multicore.patterns.observer.Notifier');
goog.require('org.puremvc.as3.multicore.interfaces.INotifier');
goog.require('org.puremvc.as3.multicore.interfaces.IProxy');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor
 * @constructor
 * @extends {org.puremvc.as3.multicore.patterns.observer.Notifier}
 * @implements {org.puremvc.as3.multicore.interfaces.IProxy}
 * @implements {org.puremvc.as3.multicore.interfaces.INotifier}
 * @param {string=} proxyName
 * @param {Object=} data
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy = function(proxyName, data) {
  org.puremvc.as3.multicore.patterns.proxy.Proxy.base(this, 'constructor');
  proxyName = typeof proxyName !== 'undefined' ? proxyName : null;
  data = typeof data !== 'undefined' ? data : null;
  this.proxyName = (proxyName != null) ? proxyName : org.puremvc.as3.multicore.patterns.proxy.Proxy.NAME;
  if (data != null)
    this.setData(data);
};
goog.inherits(org.puremvc.as3.multicore.patterns.proxy.Proxy, org.puremvc.as3.multicore.patterns.observer.Notifier);


/**
 * @export
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.NAME = 'Proxy';


/**
 * Get the proxy name
 * @export
 * @return {string}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.getProxyName = function() {
  return this.proxyName;
};


/**
 * Set the data object
 * @export
 * @param {Object} data
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.setData = function(data) {
  this.data = data;
};


/**
 * Get the data object
 * @export
 * @return {Object}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.getData = function() {
  return this.data;
};


/**
 * Called by the Model when the Proxy is registered
 * @export
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.onRegister = function() {
};


/**
 * Called by the Model when the Proxy is removed
 * @export
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.onRemove = function() {
};


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.proxyName;


/**
 * @protected
 * @type {Object}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.data;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Proxy', qName: 'org.puremvc.as3.multicore.patterns.proxy.Proxy', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IProxy, org.puremvc.as3.multicore.interfaces.INotifier] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.patterns.proxy.Proxy', org.puremvc.as3.multicore.patterns.proxy.Proxy);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.patterns.proxy.Proxy.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'NAME': { type: 'String', isStatic: true }
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'Proxy': { type: '', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy', parameters: function () { return [  { index: 1, type: 'String', optional: true },{ index: 2, type: 'Object', optional: true } ]; }},
        'getProxyName': { type: 'String', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy'},
        'setData': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        'getData': { type: 'Object', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy'},
        'onRegister': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy'},
        'onRemove': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.proxy.Proxy'}
      };
    }
  };
};