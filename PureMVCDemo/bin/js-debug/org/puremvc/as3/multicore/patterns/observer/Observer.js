/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\patterns\observer\Observer.as
 * org.puremvc.as3.multicore.patterns.observer.Observer
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.patterns.observer.Observer');

goog.require('org.puremvc.as3.multicore.interfaces.IObserver');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor. 
 * 
 * <P>
 * The notification method on the interested object should take 
 * one parameter of type <code>INotification</code></P>
 * 
 * @asparam notifyMethod the notification method of the interested object
 * @asparam notifyContext the notification context of the interested object
 * @constructor
 * @implements {org.puremvc.as3.multicore.interfaces.IObserver}
 * @param {Function} notifyMethod
 * @param {Object} notifyContext
 */
org.puremvc.as3.multicore.patterns.observer.Observer = function(notifyMethod, notifyContext) {
  this.setNotifyMethod(notifyMethod);
  this.setNotifyContext(notifyContext);
};


/**
 * @private
 * @type {Function}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.notify;


/**
 * @private
 * @type {Object}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.context;


/**
 * Set the notification method.
 * 
 * <P>
 * The notification method should take one parameter of type <code>INotification</code>.</P>
 * 
 * @asparam notifyMethod the notification (callback) method of the interested object.
 * @export
 * @param {Function} notifyMethod
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.setNotifyMethod = function(notifyMethod) {
  this.notify = notifyMethod;
};


/**
 * Set the notification context.
 * 
 * @asparam notifyContext the notification context (this) of the interested object.
 * @export
 * @param {Object} notifyContext
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.setNotifyContext = function(notifyContext) {
  this.context = notifyContext;
};


/**
 * Get the notification method.
 * 
 * @asreturn the notification (callback) method of the interested object.
 * @private
 * @return {Function}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.getNotifyMethod = function() {
  return this.notify;
};


/**
 * Get the notification context.
 * 
 * @asreturn the notification context (<code>this</code>) of the interested object.
 * @private
 * @return {Object}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.getNotifyContext = function() {
  return this.context;
};


/**
 * Notify the interested object.
 * 
 * @asparam notification the <code>INotification</code> to pass to the interested object's notification method.
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.INotification} notification
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.notifyObserver = function(notification) {
  this.getNotifyMethod().apply(this.getNotifyContext(), [notification]);
};


/**
 * Compare an object to the notification context. 
 * 
 * @asparam object the object to compare
 * @asreturn boolean indicating if the object and the notification context are the same
 * @export
 * @param {Object} object
 * @return {boolean}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.compareNotifyContext = function(object) {
  return object === this.context;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Observer', qName: 'org.puremvc.as3.multicore.patterns.observer.Observer', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IObserver] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.patterns.observer.Observer', org.puremvc.as3.multicore.patterns.observer.Observer);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.patterns.observer.Observer.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'Observer': { type: '', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Observer', parameters: function () { return [  { index: 1, type: 'Function', optional: false },{ index: 2, type: 'Object', optional: false } ]; }},
        'setNotifyMethod': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Observer', parameters: function () { return [  { index: 1, type: 'Function', optional: false } ]; }},
        'setNotifyContext': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Observer', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        'notifyObserver': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Observer', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }},
        'compareNotifyContext': { type: 'Boolean', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Observer', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }}
      };
    }
  };
};