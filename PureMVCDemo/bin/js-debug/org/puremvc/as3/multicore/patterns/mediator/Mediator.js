/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\patterns\mediator\Mediator.as
 * org.puremvc.as3.multicore.patterns.mediator.Mediator
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.patterns.mediator.Mediator');

goog.require('org.puremvc.as3.multicore.patterns.observer.Notifier');
goog.require('org.puremvc.as3.multicore.interfaces.IMediator');
goog.require('org.puremvc.as3.multicore.interfaces.INotifier');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor.
 * @constructor
 * @extends {org.puremvc.as3.multicore.patterns.observer.Notifier}
 * @implements {org.puremvc.as3.multicore.interfaces.IMediator}
 * @implements {org.puremvc.as3.multicore.interfaces.INotifier}
 * @param {string=} mediatorName
 * @param {Object=} viewComponent
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator = function(mediatorName, viewComponent) {
  org.puremvc.as3.multicore.patterns.mediator.Mediator.base(this, 'constructor');
  mediatorName = typeof mediatorName !== 'undefined' ? mediatorName : null;
  viewComponent = typeof viewComponent !== 'undefined' ? viewComponent : null;
  this.mediatorName = (mediatorName != null) ? mediatorName : org.puremvc.as3.multicore.patterns.mediator.Mediator.NAME;
  this.viewComponent = viewComponent;
};
goog.inherits(org.puremvc.as3.multicore.patterns.mediator.Mediator, org.puremvc.as3.multicore.patterns.observer.Notifier);


/**
 * @export
 * @const
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.NAME = 'Mediator';


/**
 * Get the name of the <code>Mediator</code>.
 * @asreturn the Mediator name
 * @export
 * @return {string}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.getMediatorName = function() {
  return this.mediatorName;
};


/**
 * Set the <code>IMediator</code>'s view component.
 * 
 * @asparam Object the view component
 * @export
 * @param {Object} viewComponent
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.setViewComponent = function(viewComponent) {
  this.viewComponent = viewComponent;
};


/**
 * Get the <code>Mediator</code>'s view component.
 * 
 * <P>
 * Additionally, an implicit getter will usually
 * be defined in the subclass that casts the view 
 * object to a type, like this:</P>
 * 
 * <listing>
 *		private function get comboBox : mx.controls.ComboBox 
 *		{
 *			return viewComponent as mx.controls.ComboBox;
 *		}
 * </listing>
 * 
 * @asreturn the view component
 * @export
 * @return {Object}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.getViewComponent = function() {
  return this.viewComponent;
};


/**
 * List the <code>INotification</code> names this
 * <code>Mediator</code> is interested in being notified of.
 * 
 * @asreturn Array the list of <code>INotification</code> names 
 * @export
 * @return {Array}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.listNotificationInterests = function() {
  return [];
};


/**
 * Handle <code>INotification</code>s.
 * 
 * <P>
 * Typically this will be handled in a switch statement,
 * with one 'case' entry per <code>INotification</code>
 * the <code>Mediator</code> is interested in.
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.INotification} notification
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.handleNotification = function(notification) {
};


/**
 * Called by the View when the Mediator is registered
 * @export
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.onRegister = function() {
};


/**
 * Called by the View when the Mediator is removed
 * @export
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.onRemove = function() {
};


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.mediatorName;


/**
 * @protected
 * @type {Object}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.viewComponent;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Mediator', qName: 'org.puremvc.as3.multicore.patterns.mediator.Mediator', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IMediator, org.puremvc.as3.multicore.interfaces.INotifier] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.patterns.mediator.Mediator', org.puremvc.as3.multicore.patterns.mediator.Mediator);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.patterns.mediator.Mediator.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'Mediator': { type: '', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator', parameters: function () { return [  { index: 1, type: 'String', optional: true },{ index: 2, type: 'Object', optional: true } ]; }},
        'getMediatorName': { type: 'String', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator'},
        'setViewComponent': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        'getViewComponent': { type: 'Object', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator'},
        'listNotificationInterests': { type: 'Array', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator'},
        'handleNotification': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }},
        'onRegister': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator'},
        'onRemove': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.mediator.Mediator'}
      };
    }
  };
};