/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\patterns\observer\Notifier.as
 * org.puremvc.as3.multicore.patterns.observer.Notifier
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.patterns.observer.Notifier');

goog.require('org.puremvc.as3.multicore.patterns.facade.Facade');
goog.require('org.puremvc.as3.multicore.interfaces.INotifier');



/**
 * @constructor
 * @implements {org.puremvc.as3.multicore.interfaces.INotifier}
 */
org.puremvc.as3.multicore.patterns.observer.Notifier = function() {
};


/**
 * Create and send an <code>INotification</code>.
 * 
 * <P>
 * Keeps us from having to construct new INotification 
 * instances in our implementation code.
 * @asparam notificationName the name of the notiification to send
 * @asparam body the body of the notification (optional)
 * @asparam type the type of the notification (optional)
 * @export
 * @param {string} notificationName
 * @param {Object=} body
 * @param {string=} type
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.sendNotification = function(notificationName, body, type) {
  body = typeof body !== 'undefined' ? body : null;
  type = typeof type !== 'undefined' ? type : null;
  if (this.facade != null)
    this.facade.sendNotification(notificationName, body, type);
};


/**
 * Initialize this INotifier instance.
 * <P>
 * This is how a Notifier gets its multitonKey. 
 * Calls to sendNotification or to access the
 * facade will fail until after this method 
 * has been called.</P>
 * 
 * <P>
 * Mediators, Commands or Proxies may override 
 * this method in order to send notifications
 * or access the Multiton Facade instance as
 * soon as possible. They CANNOT access the facade
 * in their constructors, since this method will not
 * yet have been called.</P> 
 * 
 * @asparam key the multitonKey for this INotifier to use
 * @export
 * @param {string} key
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.initializeNotifier = function(key) {
  this.multitonKey = key;
};


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.multitonKey;


/**
 * @protected
 * @const
 * @type {string}
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.MULTITON_MSG = "multitonKey for this Notifier not yet initialized!";


org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.get__facade = function() {
  if (this.multitonKey == null)
    throw Error(this.MULTITON_MSG);
  return org.puremvc.as3.multicore.patterns.facade.Facade.getInstance(this.multitonKey);
};


Object.defineProperties(org.puremvc.as3.multicore.patterns.observer.Notifier.prototype, /** @lends {org.puremvc.as3.multicore.patterns.observer.Notifier.prototype} */ {
/** @export */
facade: {
get: org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.get__facade}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Notifier', qName: 'org.puremvc.as3.multicore.patterns.observer.Notifier', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.INotifier] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.patterns.observer.Notifier', org.puremvc.as3.multicore.patterns.observer.Notifier);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.patterns.observer.Notifier.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'sendNotification': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Notifier', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Object', optional: true },{ index: 3, type: 'String', optional: true } ]; }},
        'initializeNotifier': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.patterns.observer.Notifier', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};