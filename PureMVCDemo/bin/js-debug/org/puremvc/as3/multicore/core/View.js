/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\core\View.as
 * org.puremvc.as3.multicore.core.View
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.core.View');

goog.require('org.puremvc.as3.multicore.patterns.observer.Observer');
goog.require('org.puremvc.as3.multicore.interfaces.IMediator');
goog.require('org.puremvc.as3.multicore.interfaces.IObserver');
goog.require('org.puremvc.as3.multicore.interfaces.IView');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor. 
 * 
 * <P>
 * This <code>IView</code> implementation is a Multiton, 
 * so you should not call the constructor 
 * directly, but instead call the static Multiton 
 * Factory method <code>View.getInstance( multitonKey )</code>
 * 
 * @throws Error Error if instance for this Multiton key has already been constructed
 * 
 * @constructor
 * @implements {org.puremvc.as3.multicore.interfaces.IView}
 * @param {string} key
 */
org.puremvc.as3.multicore.core.View = function(key) {
  if (org.puremvc.as3.multicore.core.View.instanceMap[key] != null)
    throw Error(this.MULTITON_MSG);
  this.multitonKey = key;
  org.puremvc.as3.multicore.core.View.instanceMap[this.multitonKey] = this;
  this.mediatorMap = new Array();
  this.observerMap = new Array();
  this.initializeView();
};


/**
 * Initialize the Singleton View instance.
 * 
 * <P>
 * Called automatically by the constructor, this
 * is your opportunity to initialize the Singleton
 * instance in your subclass without overriding the
 * constructor.</P>
 * 
 * @asreturn void
 * @protected
 */
org.puremvc.as3.multicore.core.View.prototype.initializeView = function() {
};


/**
 * View Singleton Factory method.
 * 
 * @asreturn the Singleton instance of <code>View</code>
 * @export
 * @param {string} key
 * @return {org.puremvc.as3.multicore.interfaces.IView}
 */
org.puremvc.as3.multicore.core.View.getInstance = function(key) {
  if (org.puremvc.as3.multicore.core.View.instanceMap[key] == null)
    org.puremvc.as3.multicore.core.View.instanceMap[key] = new org.puremvc.as3.multicore.core.View(key);
  return org.puremvc.as3.multicore.core.View.instanceMap[key];
};


/**
 * Register an <code>IObserver</code> to be notified
 * of <code>INotifications</code> with a given name.
 * 
 * @asparam notificationName the name of the <code>INotifications</code> to notify this <code>IObserver</code> of
 * @asparam observer the <code>IObserver</code> to register
 * @export
 * @param {string} notificationName
 * @param {org.puremvc.as3.multicore.interfaces.IObserver} observer
 */
org.puremvc.as3.multicore.core.View.prototype.registerObserver = function(notificationName, observer) {
  if (this.observerMap[notificationName] != null) {
    this.observerMap[notificationName].push(observer);
  } else {
    this.observerMap[notificationName] = [observer];
  }
};


/**
 * Notify the <code>IObservers</code> for a particular <code>INotification</code>.
 * 
 * <P>
 * All previously attached <code>IObservers</code> for this <code>INotification</code>'s
 * list are notified and are passed a reference to the <code>INotification</code> in 
 * the order in which they were registered.</P>
 * 
 * @asparam notification the <code>INotification</code> to notify <code>IObservers</code> of.
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.INotification} notification
 */
org.puremvc.as3.multicore.core.View.prototype.notifyObservers = function(notification) {
  if (this.observerMap[notification.getName()] != null) {
    var /** @type {Array} */ observers_ref = org.apache.flex.utils.Language.as(this.observerMap[notification.getName()], Array);
    var /** @type {Array} */ observers = new Array();
    var /** @type {org.puremvc.as3.multicore.interfaces.IObserver} */ observer;
    for (var /** @type {number} */ i = 0; i < observers_ref.length; i++) {
      observer = org.apache.flex.utils.Language.as(observers_ref[i], org.puremvc.as3.multicore.interfaces.IObserver);
      observers.push(observer);
    }
    for (i = 0; i < observers.length; i++) {
      observer = org.apache.flex.utils.Language.as(observers[i], org.puremvc.as3.multicore.interfaces.IObserver);
      observer.notifyObserver(notification);
    }
  }
};


/**
 * Remove the observer for a given notifyContext from an observer list for a given Notification name.
 * <P>
 * @asparam notificationName which observer list to remove from 
 * @asparam notifyContext remove the observer with this object as its notifyContext
 * @export
 * @param {string} notificationName
 * @param {Object} notifyContext
 */
org.puremvc.as3.multicore.core.View.prototype.removeObserver = function(notificationName, notifyContext) {
  var /** @type {Array} */ observers = org.apache.flex.utils.Language.as(this.observerMap[notificationName], Array);
  for (var /** @type {number} */ i = 0; i < observers.length; i++) {
    if (org.apache.flex.utils.Language.as(observers[i], org.puremvc.as3.multicore.patterns.observer.Observer, true).compareNotifyContext(notifyContext) == true) {
      observers.splice(i, 1);
      break;
    }
  }
  if (observers.length == 0) {
    delete this.observerMap[notificationName];
  }
};


/**
 * Register an <code>IMediator</code> instance with the <code>View</code>.
 * 
 * <P>
 * Registers the <code>IMediator</code> so that it can be retrieved by name,
 * and further interrogates the <code>IMediator</code> for its 
 * <code>INotification</code> interests.</P>
 * <P>
 * If the <code>IMediator</code> returns any <code>INotification</code> 
 * names to be notified about, an <code>Observer</code> is created encapsulating 
 * the <code>IMediator</code> instance's <code>handleNotification</code> method 
 * and registering it as an <code>Observer</code> for all <code>INotifications</code> the 
 * <code>IMediator</code> is interested in.</p>
 * 
 * @asparam mediatorName the name to associate with this <code>IMediator</code> instance
 * @asparam mediator a reference to the <code>IMediator</code> instance
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.IMediator} mediator
 */
org.puremvc.as3.multicore.core.View.prototype.registerMediator = function(mediator) {
  if (this.mediatorMap[mediator.getMediatorName()] != null)
    return;
  mediator.initializeNotifier(this.multitonKey);
  this.mediatorMap[mediator.getMediatorName()] = mediator;
  var /** @type {Array} */ interests = mediator.listNotificationInterests();
  if (interests.length > 0) {
    var /** @type {org.puremvc.as3.multicore.patterns.observer.Observer} */ observer = new org.puremvc.as3.multicore.patterns.observer.Observer(org.apache.flex.utils.Language.closure(mediator.handleNotification, mediator, 'handleNotification'), mediator);
    for (var /** @type {number} */ i = 0; i < interests.length; i++) {
      this.registerObserver(interests[i], observer);
    }
  }
  mediator.onRegister();
};


/**
 * Retrieve an <code>IMediator</code> from the <code>View</code>.
 * 
 * @asparam mediatorName the name of the <code>IMediator</code> instance to retrieve.
 * @asreturn the <code>IMediator</code> instance previously registered with the given <code>mediatorName</code>.
 * @export
 * @param {string} mediatorName
 * @return {org.puremvc.as3.multicore.interfaces.IMediator}
 */
org.puremvc.as3.multicore.core.View.prototype.retrieveMediator = function(mediatorName) {
  return this.mediatorMap[mediatorName];
};


/**
 * Remove an <code>IMediator</code> from the <code>View</code>.
 * 
 * @asparam mediatorName name of the <code>IMediator</code> instance to be removed.
 * @asreturn the <code>IMediator</code> that was removed from the <code>View</code>
 * @export
 * @param {string} mediatorName
 * @return {org.puremvc.as3.multicore.interfaces.IMediator}
 */
org.puremvc.as3.multicore.core.View.prototype.removeMediator = function(mediatorName) {
  var /** @type {org.puremvc.as3.multicore.interfaces.IMediator} */ mediator = org.apache.flex.utils.Language.as(this.mediatorMap[mediatorName], org.puremvc.as3.multicore.interfaces.IMediator);
  if (mediator) {
    var /** @type {Array} */ interests = mediator.listNotificationInterests();
    for (var /** @type {number} */ i = 0; i < interests.length; i++) {
      this.removeObserver(interests[i], mediator);
    }
    delete this.mediatorMap[mediatorName];
    mediator.onRemove();
  }
  return mediator;
};


/**
 * Check if a Mediator is registered or not
 * 
 * @asparam mediatorName
 * @asreturn whether a Mediator is registered with the given <code>mediatorName</code>.
 * @export
 * @param {string} mediatorName
 * @return {boolean}
 */
org.puremvc.as3.multicore.core.View.prototype.hasMediator = function(mediatorName) {
  return this.mediatorMap[mediatorName] != null;
};


/**
 * Remove an IView instance
 * 
 * @asparam multitonKey of IView instance to remove
 * @export
 * @param {string} key
 */
org.puremvc.as3.multicore.core.View.removeView = function(key) {
  delete org.puremvc.as3.multicore.core.View.instanceMap[key];
};


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.View.prototype.mediatorMap;


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.View.prototype.observerMap;


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.View.instanceMap = new Array();


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.core.View.prototype.multitonKey;


/**
 * @protected
 * @const
 * @type {string}
 */
org.puremvc.as3.multicore.core.View.prototype.MULTITON_MSG = "View instance for this Multiton key already constructed!";


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.core.View.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'View', qName: 'org.puremvc.as3.multicore.core.View', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IView] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.core.View', org.puremvc.as3.multicore.core.View);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.core.View.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'View': { type: '', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'getInstance': { type: 'org.puremvc.as3.multicore.interfaces.IView', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'registerObserver': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'org.puremvc.as3.multicore.interfaces.IObserver', optional: false } ]; }},
        'notifyObservers': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }},
        'removeObserver': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Object', optional: false } ]; }},
        'registerMediator': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.IMediator', optional: false } ]; }},
        'retrieveMediator': { type: 'org.puremvc.as3.multicore.interfaces.IMediator', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeMediator': { type: 'org.puremvc.as3.multicore.interfaces.IMediator', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'hasMediator': { type: 'Boolean', declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeView': { type: 'void', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.View', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};