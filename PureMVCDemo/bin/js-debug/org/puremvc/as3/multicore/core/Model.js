/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\core\Model.as
 * org.puremvc.as3.multicore.core.Model
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.core.Model');

goog.require('org.puremvc.as3.multicore.interfaces.IModel');
goog.require('org.puremvc.as3.multicore.interfaces.IProxy');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor. 
 * 
 * <P>
 * This <code>IModel</code> implementation is a Multiton, 
 * so you should not call the constructor 
 * directly, but instead call the static Multiton 
 * Factory method <code>Model.getInstance( multitonKey )</code>
 * 
 * @throws Error Error if instance for this Multiton key instance has already been constructed
 * 
 * @constructor
 * @implements {org.puremvc.as3.multicore.interfaces.IModel}
 * @param {string} key
 */
org.puremvc.as3.multicore.core.Model = function(key) {
  if (org.puremvc.as3.multicore.core.Model.instanceMap[key] != null)
    throw Error(this.MULTITON_MSG);
  this.multitonKey = key;
  org.puremvc.as3.multicore.core.Model.instanceMap[this.multitonKey] = this;
  this.proxyMap = new Array();
  this.initializeModel();
};


/**
 * Initialize the <code>Model</code> instance.
 * 
 * <P>
 * Called automatically by the constructor, this
 * is your opportunity to initialize the Singleton
 * instance in your subclass without overriding the
 * constructor.</P>
 * 
 * @asreturn void
 * @protected
 */
org.puremvc.as3.multicore.core.Model.prototype.initializeModel = function() {
};


/**
 * <code>Model</code> Multiton Factory method.
 * 
 * @asreturn the instance for this Multiton key 
 * @export
 * @param {string} key
 * @return {org.puremvc.as3.multicore.interfaces.IModel}
 */
org.puremvc.as3.multicore.core.Model.getInstance = function(key) {
  if (org.puremvc.as3.multicore.core.Model.instanceMap[key] == null)
    org.puremvc.as3.multicore.core.Model.instanceMap[key] = new org.puremvc.as3.multicore.core.Model(key);
  return org.puremvc.as3.multicore.core.Model.instanceMap[key];
};


/**
 * Register an <code>IProxy</code> with the <code>Model</code>.
 * 
 * @asparam proxy an <code>IProxy</code> to be held by the <code>Model</code>.
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.IProxy} proxy
 */
org.puremvc.as3.multicore.core.Model.prototype.registerProxy = function(proxy) {
  proxy.initializeNotifier(this.multitonKey);
  this.proxyMap[proxy.getProxyName()] = proxy;
  proxy.onRegister();
};


/**
 * Retrieve an <code>IProxy</code> from the <code>Model</code>.
 * 
 * @asparam proxyName
 * @asreturn the <code>IProxy</code> instance previously registered with the given <code>proxyName</code>.
 * @export
 * @param {string} proxyName
 * @return {org.puremvc.as3.multicore.interfaces.IProxy}
 */
org.puremvc.as3.multicore.core.Model.prototype.retrieveProxy = function(proxyName) {
  return this.proxyMap[proxyName];
};


/**
 * Check if a Proxy is registered
 * 
 * @asparam proxyName
 * @asreturn whether a Proxy is currently registered with the given <code>proxyName</code>.
 * @export
 * @param {string} proxyName
 * @return {boolean}
 */
org.puremvc.as3.multicore.core.Model.prototype.hasProxy = function(proxyName) {
  return this.proxyMap[proxyName] != null;
};


/**
 * Remove an <code>IProxy</code> from the <code>Model</code>.
 * 
 * @asparam proxyName name of the <code>IProxy</code> instance to be removed.
 * @asreturn the <code>IProxy</code> that was removed from the <code>Model</code>
 * @export
 * @param {string} proxyName
 * @return {org.puremvc.as3.multicore.interfaces.IProxy}
 */
org.puremvc.as3.multicore.core.Model.prototype.removeProxy = function(proxyName) {
  var /** @type {org.puremvc.as3.multicore.interfaces.IProxy} */ proxy = org.apache.flex.utils.Language.as(this.proxyMap[proxyName], org.puremvc.as3.multicore.interfaces.IProxy);
  if (proxy) {
    this.proxyMap[proxyName] = null;
    proxy.onRemove();
  }
  return proxy;
};


/**
 * Remove an IModel instance
 * 
 * @asparam multitonKey of IModel instance to remove
 * @export
 * @param {string} key
 */
org.puremvc.as3.multicore.core.Model.removeModel = function(key) {
  delete org.puremvc.as3.multicore.core.Model.instanceMap[key];
};


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.Model.prototype.proxyMap;


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.Model.instanceMap = new Array();


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.core.Model.prototype.multitonKey;


/**
 * @protected
 * @const
 * @type {string}
 */
org.puremvc.as3.multicore.core.Model.prototype.MULTITON_MSG = "Model instance for this Multiton key already constructed!";


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.core.Model.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Model', qName: 'org.puremvc.as3.multicore.core.Model', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IModel] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.core.Model', org.puremvc.as3.multicore.core.Model);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.core.Model.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'Model': { type: '', declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'getInstance': { type: 'org.puremvc.as3.multicore.interfaces.IModel', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'registerProxy': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.IProxy', optional: false } ]; }},
        'retrieveProxy': { type: 'org.puremvc.as3.multicore.interfaces.IProxy', declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'hasProxy': { type: 'Boolean', declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeProxy': { type: 'org.puremvc.as3.multicore.interfaces.IProxy', declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeModel': { type: 'void', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.Model', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};