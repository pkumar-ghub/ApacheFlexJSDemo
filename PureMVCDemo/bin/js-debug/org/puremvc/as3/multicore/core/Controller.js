/**
 * Generated by Apache Flex Cross-Compiler from org\puremvc\as3\multicore\core\Controller.as
 * org.puremvc.as3.multicore.core.Controller
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.puremvc.as3.multicore.core.Controller');

goog.require('org.puremvc.as3.multicore.core.View');
goog.require('org.puremvc.as3.multicore.patterns.observer.Observer');
goog.require('org.puremvc.as3.multicore.interfaces.IController');
goog.require('org.apache.flex.utils.Language');



/**
 * Constructor. 
 * 
 * <P>
 * This <code>IController</code> implementation is a Multiton, 
 * so you should not call the constructor 
 * directly, but instead call the static Factory method, 
 * passing the unique key for this instance 
 * <code>Controller.getInstance( multitonKey )</code>
 * 
 * @throws Error Error if instance for this Multiton key has already been constructed
 * 
 * @constructor
 * @implements {org.puremvc.as3.multicore.interfaces.IController}
 * @param {string} key
 */
org.puremvc.as3.multicore.core.Controller = function(key) {
  if (org.puremvc.as3.multicore.core.Controller.instanceMap[key] != null)
    throw Error(this.MULTITON_MSG);
  this.multitonKey = key;
  org.puremvc.as3.multicore.core.Controller.instanceMap[this.multitonKey] = this;
  this.commandMap = new Array();
  this.initializeController();
};


/**
 * Initialize the Multiton <code>Controller</code> instance.
 * 
 * <P>Called automatically by the constructor.</P> 
 * 
 * <P>Note that if you are using a subclass of <code>View</code>
 * in your application, you should <i>also</i> subclass <code>Controller</code>
 * and override the <code>initializeController</code> method in the 
 * following way:</P>
 * 
 * <listing>
 *		// ensure that the Controller is talking to my IView implementation
 *		override public function initializeController(  ) : void 
 *		{
 *			view = MyView.getInstance();
 *		}
 * </listing>
 * 
 * @asreturn void
 * @protected
 */
org.puremvc.as3.multicore.core.Controller.prototype.initializeController = function() {
  this.view = org.puremvc.as3.multicore.core.View.getInstance(this.multitonKey);
};


/**
 * <code>Controller</code> Multiton Factory method.
 * 
 * @asreturn the Multiton instance of <code>Controller</code>
 * @export
 * @param {string} key
 * @return {org.puremvc.as3.multicore.interfaces.IController}
 */
org.puremvc.as3.multicore.core.Controller.getInstance = function(key) {
  if (org.puremvc.as3.multicore.core.Controller.instanceMap[key] == null)
    org.puremvc.as3.multicore.core.Controller.instanceMap[key] = new org.puremvc.as3.multicore.core.Controller(key);
  return org.puremvc.as3.multicore.core.Controller.instanceMap[key];
};


/**
 * If an <code>ICommand</code> has previously been registered 
 * to handle a the given <code>INotification</code>, then it is executed.
 * 
 * @asparam note an <code>INotification</code>
 * @export
 * @param {org.puremvc.as3.multicore.interfaces.INotification} note
 */
org.puremvc.as3.multicore.core.Controller.prototype.executeCommand = function(note) {
  var /** @type {Object} */ commandClassRef = this.commandMap[note.getName()];
  if (commandClassRef == null)
    return;
  var /** @type {org.puremvc.as3.multicore.interfaces.ICommand} */ commandInstance = new commandClassRef();
  commandInstance.initializeNotifier(this.multitonKey);
  commandInstance.execute(note);
};


/**
 * Register a particular <code>ICommand</code> class as the handler 
 * for a particular <code>INotification</code>.
 * 
 * <P>
 * If an <code>ICommand</code> has already been registered to 
 * handle <code>INotification</code>s with this name, it is no longer
 * used, the new <code>ICommand</code> is used instead.</P>
 * 
 * The Observer for the new ICommand is only created if this the 
 * first time an ICommand has been regisered for this Notification name.
 * 
 * @asparam notificationName the name of the <code>INotification</code>
 * @asparam commandClassRef the <code>Class</code> of the <code>ICommand</code>
 * @export
 * @param {string} notificationName
 * @param {Object} commandClassRef
 */
org.puremvc.as3.multicore.core.Controller.prototype.registerCommand = function(notificationName, commandClassRef) {
  if (this.commandMap[notificationName] == null) {
    this.view.registerObserver(notificationName, new org.puremvc.as3.multicore.patterns.observer.Observer(org.apache.flex.utils.Language.closure(this.executeCommand, this, 'executeCommand'), this));
  }
  this.commandMap[notificationName] = commandClassRef;
};


/**
 * Check if a Command is registered for a given Notification 
 * 
 * @asparam notificationName
 * @asreturn whether a Command is currently registered for the given <code>notificationName</code>.
 * @export
 * @param {string} notificationName
 * @return {boolean}
 */
org.puremvc.as3.multicore.core.Controller.prototype.hasCommand = function(notificationName) {
  return this.commandMap[notificationName] != null;
};


/**
 * Remove a previously registered <code>ICommand</code> to <code>INotification</code> mapping.
 * 
 * @asparam notificationName the name of the <code>INotification</code> to remove the <code>ICommand</code> mapping for
 * @export
 * @param {string} notificationName
 */
org.puremvc.as3.multicore.core.Controller.prototype.removeCommand = function(notificationName) {
  if (this.hasCommand(notificationName)) {
    this.view.removeObserver(notificationName, this);
    this.commandMap[notificationName] = null;
  }
};


/**
 * Remove an IController instance
 * 
 * @asparam multitonKey of IController instance to remove
 * @export
 * @param {string} key
 */
org.puremvc.as3.multicore.core.Controller.removeController = function(key) {
  delete org.puremvc.as3.multicore.core.Controller.instanceMap[key];
};


/**
 * @protected
 * @type {org.puremvc.as3.multicore.interfaces.IView}
 */
org.puremvc.as3.multicore.core.Controller.prototype.view;


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.Controller.prototype.commandMap;


/**
 * @protected
 * @type {string}
 */
org.puremvc.as3.multicore.core.Controller.prototype.multitonKey;


/**
 * @protected
 * @type {Array}
 */
org.puremvc.as3.multicore.core.Controller.instanceMap = new Array();


/**
 * @protected
 * @const
 * @type {string}
 */
org.puremvc.as3.multicore.core.Controller.prototype.MULTITON_MSG = "Controller instance for this Multiton key already constructed!";


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.puremvc.as3.multicore.core.Controller.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Controller', qName: 'org.puremvc.as3.multicore.core.Controller', kind: 'class' }], interfaces: [org.puremvc.as3.multicore.interfaces.IController] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.puremvc.as3.multicore.core.Controller', org.puremvc.as3.multicore.core.Controller);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.puremvc.as3.multicore.core.Controller.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'Controller': { type: '', declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'getInstance': { type: 'org.puremvc.as3.multicore.interfaces.IController', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'executeCommand': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }},
        'registerCommand': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Class', optional: false } ]; }},
        'hasCommand': { type: 'Boolean', declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeCommand': { type: 'void', declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'removeController': { type: 'void', isStatic: true , declaredBy: 'org.puremvc.as3.multicore.core.Controller', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};