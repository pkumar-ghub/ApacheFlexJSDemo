/**
 * Generated by Apache Flex Cross-Compiler from org\apache\flex\html\DateField.as
 * org.apache.flex.html.DateField
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.html.DateField');

goog.require('org.apache.flex.core.IBead');
goog.require('org.apache.flex.core.IDateChooserModel');
goog.require('org.apache.flex.core.IFormatBead');
goog.require('org.apache.flex.core.UIBase');
goog.require('org.apache.flex.core.ValuesManager');
goog.require('org.apache.flex.utils.Language');



/**
 *  constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @constructor
 * @extends {org.apache.flex.core.UIBase}
 */
org.apache.flex.html.DateField = function() {
  org.apache.flex.html.DateField.base(this, 'constructor');
  this.className = "DateField";
};
goog.inherits(org.apache.flex.html.DateField, org.apache.flex.core.UIBase);


/**
 * The method called when added to a parent. The DateField class uses
 * this opportunity to install additional beads.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @override
 */
org.apache.flex.html.DateField.prototype.addedToParent = function() {
  var /** @type {*} */ klass = org.apache.flex.core.ValuesManager["valuesImpl"].getValue(this, "iFormatBead");
  var /** @type {org.apache.flex.core.IBead} */ bead = org.apache.flex.utils.Language.as(new klass(), org.apache.flex.core.IBead);
  if (bead) {
    this.addBead(bead);
  }
  org.apache.flex.html.DateField.superClass_.addedToParent.apply(this);
};


/**
 *  Replace existing format bead if it exists.
 *
 *  @copy org.apache.flex.core.IStrand#addBead()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @override
 */
org.apache.flex.html.DateField.prototype.addBead = function(bead) {
  if (org.apache.flex.utils.Language.is(bead, org.apache.flex.core.IFormatBead)) {
    var /** @type {org.apache.flex.core.IBead} */ formatBead = this.getBeadByType(org.apache.flex.core.IFormatBead);
    if (formatBead != null) {
      this.removeBead(formatBead);
    }
  }
  org.apache.flex.html.DateField.superClass_.addBead.apply(this, [ bead] );
};


org.apache.flex.html.DateField.prototype.get__selectedDate = function() {
  return org.apache.flex.utils.Language.as(this.model, org.apache.flex.core.IDateChooserModel, true).selectedDate;
};


org.apache.flex.html.DateField.prototype.set__selectedDate = function(value) {
  org.apache.flex.utils.Language.as(this.model, org.apache.flex.core.IDateChooserModel, true).selectedDate = value;
};


Object.defineProperties(org.apache.flex.html.DateField.prototype, /** @lends {org.apache.flex.html.DateField.prototype} */ {
/** @export */
selectedDate: {
get: org.apache.flex.html.DateField.prototype.get__selectedDate,
set: org.apache.flex.html.DateField.prototype.set__selectedDate}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.html.DateField.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'DateField', qName: 'org.apache.flex.html.DateField', kind: 'class' }] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.html.DateField', org.apache.flex.html.DateField);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.html.DateField.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'selectedDate': { type: 'Date', access: 'readwrite', declaredBy: 'org.apache.flex.html.DateField'}
      };
    },
    methods: function () {
      return {
        'DateField': { type: '', declaredBy: 'org.apache.flex.html.DateField'},
        'addedToParent': { type: 'void', declaredBy: 'org.apache.flex.html.DateField'},
        'addBead': { type: 'void', declaredBy: 'org.apache.flex.html.DateField', parameters: function () { return [  { index: 1, type: 'org.apache.flex.core.IBead', optional: false } ]; }}
      };
    },
    metadata: function () { return [  ]; }
  };
};