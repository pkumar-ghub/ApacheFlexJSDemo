/**
 * Generated by Apache Flex Cross-Compiler from org\apache\flex\html\beads\DataGridView.as
 * org.apache.flex.html.beads.DataGridView
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.html.beads.DataGridView');

goog.require('org.apache.flex.core.IBeadModel');
goog.require('org.apache.flex.core.IDataGridModel');
goog.require('org.apache.flex.core.ISelectionModel');
goog.require('org.apache.flex.events.Event');
goog.require('org.apache.flex.events.IEventDispatcher');
goog.require('org.apache.flex.html.Container');
goog.require('org.apache.flex.html.DataGrid');
goog.require('org.apache.flex.html.DataGridButtonBar');
goog.require('org.apache.flex.html.beads.GroupView');
goog.require('org.apache.flex.html.beads.layouts.ButtonBarLayout');
goog.require('org.apache.flex.html.beads.models.ButtonBarModel');
goog.require('org.apache.flex.html.supportClasses.DataGridColumn');
goog.require('org.apache.flex.html.supportClasses.DataGridColumnList');
goog.require('org.apache.flex.html.supportClasses.Viewport');
goog.require('org.apache.flex.core.IBeadView');
goog.require('org.apache.flex.utils.Language');



/**
 *  constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @constructor
 * @extends {org.apache.flex.html.beads.GroupView}
 * @implements {org.apache.flex.core.IBeadView}
 */
org.apache.flex.html.beads.DataGridView = function() {
  org.apache.flex.html.beads.DataGridView.base(this, 'constructor');
};
goog.inherits(org.apache.flex.html.beads.DataGridView, org.apache.flex.html.beads.GroupView);


/**
 * @private
 * @type {org.apache.flex.core.IStrand}
 */
org.apache.flex.html.beads.DataGridView.prototype._strand;


/**
 * @private
 * @type {org.apache.flex.html.DataGridButtonBar}
 */
org.apache.flex.html.beads.DataGridView.prototype._header;


/**
 * @private
 * @type {org.apache.flex.html.Container}
 */
org.apache.flex.html.beads.DataGridView.prototype._listArea;


/**
 * @private
 * @type {Array}
 */
org.apache.flex.html.beads.DataGridView.prototype._lists;


/**
 * @asprivate
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.html.beads.DataGridView.prototype.finishSetup = function(event) {
  var /** @type {org.apache.flex.html.DataGrid} */ host = org.apache.flex.utils.Language.as(this._strand, org.apache.flex.html.DataGrid);
  if (this._lists == null || this._lists.length == 0) {
    this.createLists();
  }
  var /** @type {org.apache.flex.core.IDataGridPresentationModel} */ presentationModel = host.presentationModel;
  var /** @type {org.apache.flex.core.IDataGridModel} */ sharedModel = org.apache.flex.utils.Language.as(host.model, org.apache.flex.core.IDataGridModel);
  org.apache.flex.utils.Language.as(sharedModel, org.apache.flex.events.IEventDispatcher, true).addEventListener("dataProviderChanged", org.apache.flex.utils.Language.closure(this.handleDataProviderChanged, this, 'handleDataProviderChanged'));
  org.apache.flex.utils.Language.as(sharedModel, org.apache.flex.events.IEventDispatcher, true).addEventListener("selectedIndexChanged", org.apache.flex.utils.Language.closure(this.handleSelectedIndexChanged, this, 'handleSelectedIndexChanged'));
  var /** @type {Array} */ columnLabels = new Array();
  var /** @type {Array} */ buttonWidths = new Array();
  var /** @type {number} */ marginBorderOffset = 0;
  
  for (var /** @type {number} */ i = 0; i < sharedModel.columns.length; i++) {
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumn} */ dgc = org.apache.flex.utils.Language.as(sharedModel.columns[i], org.apache.flex.html.supportClasses.DataGridColumn);
    columnLabels.push(dgc.label);
    var /** @type {number} */ colWidth = dgc.columnWidth - marginBorderOffset;
    buttonWidths.push(colWidth);
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ list = org.apache.flex.utils.Language.as(this._lists[i], org.apache.flex.html.supportClasses.DataGridColumnList);
    if (!isNaN(colWidth)) {
      list.width = Number(colWidth - marginBorderOffset);
    } else {
      
      list.element.style["flex-grow"] = "1";
    }
  }
  var /** @type {org.apache.flex.html.beads.layouts.ButtonBarLayout} */ bblayout = new org.apache.flex.html.beads.layouts.ButtonBarLayout();
  this._header.buttonWidths = buttonWidths;
  this._header.widthType = org.apache.flex.html.beads.models.ButtonBarModel.PIXEL_WIDTHS;
  this._header.dataProvider = columnLabels;
  this._header.addBead(bblayout);
  this._header.addBead(new org.apache.flex.html.supportClasses.Viewport());
  host.addElement(this._header);
  host.addElement(this._listArea);
  this.handleDataProviderChanged(event);
  host.addEventListener("widthChanged", org.apache.flex.utils.Language.closure(this.handleSizeChanges, this, 'handleSizeChanges'));
  host.addEventListener("heightChanged", org.apache.flex.utils.Language.closure(this.handleSizeChanges, this, 'handleSizeChanges'));
};


/**
 * @asprivate
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.html.beads.DataGridView.prototype.handleSizeChanges = function(event) {
  this._header.dispatchEvent(new org.apache.flex.events.Event("layoutChanged"));
  this._listArea.dispatchEvent(new org.apache.flex.events.Event("layoutChanged"));
};


/**
 * @asprivate
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.html.beads.DataGridView.prototype.handleDataProviderChanged = function(event) {
  var /** @type {org.apache.flex.core.IDataGridModel} */ sharedModel = org.apache.flex.utils.Language.as(this._strand.getBeadByType(org.apache.flex.core.IBeadModel), org.apache.flex.core.IDataGridModel);
  for (var /** @type {number} */ i = 0; i < this._lists.length; i++) {
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ list = org.apache.flex.utils.Language.as(this._lists[i], org.apache.flex.html.supportClasses.DataGridColumnList);
    var /** @type {org.apache.flex.core.ISelectionModel} */ listModel = org.apache.flex.utils.Language.as(list.getBeadByType(org.apache.flex.core.IBeadModel), org.apache.flex.core.ISelectionModel);
    listModel.dataProvider = sharedModel.dataProvider;
  }
  this.host.dispatchEvent(new org.apache.flex.events.Event("layoutNeeded"));
};


/**
 * @asprivate
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.html.beads.DataGridView.prototype.handleSelectedIndexChanged = function(event) {
  var /** @type {org.apache.flex.core.IDataGridModel} */ sharedModel = org.apache.flex.utils.Language.as(this._strand.getBeadByType(org.apache.flex.core.IBeadModel), org.apache.flex.core.IDataGridModel);
  var /** @type {number} */ newIndex = sharedModel.selectedIndex;
  for (var /** @type {number} */ i = 0; i < this._lists.length; i++) {
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ list = org.apache.flex.utils.Language.as(this._lists[i], org.apache.flex.html.supportClasses.DataGridColumnList);
    list.selectedIndex = newIndex;
  }
};


/**
 * @asprivate
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.html.beads.DataGridView.prototype.handleColumnListChange = function(event) {
  var /** @type {org.apache.flex.core.IDataGridModel} */ sharedModel = org.apache.flex.utils.Language.as(this._strand.getBeadByType(org.apache.flex.core.IBeadModel), org.apache.flex.core.IDataGridModel);
  var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ list = org.apache.flex.utils.Language.as(event.target, org.apache.flex.html.supportClasses.DataGridColumnList);
  sharedModel.selectedIndex = list.selectedIndex;
  for (var /** @type {number} */ i = 0; i < this._lists.length; i++) {
    if (list != this._lists[i]) {
      var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ otherList = org.apache.flex.utils.Language.as(this._lists[i], org.apache.flex.html.supportClasses.DataGridColumnList);
      otherList.selectedIndex = list.selectedIndex;
    }
  }
  this.host.dispatchEvent(new org.apache.flex.events.Event('change'));
};


/**
 * @asprivate
 * @private
 */
org.apache.flex.html.beads.DataGridView.prototype.createLists = function() {
  var /** @type {org.apache.flex.html.DataGrid} */ host = org.apache.flex.utils.Language.as(this._strand, org.apache.flex.html.DataGrid);
  var /** @type {org.apache.flex.core.IDataGridModel} */ sharedModel = org.apache.flex.utils.Language.as(host.model, org.apache.flex.core.IDataGridModel);
  var /** @type {org.apache.flex.core.IDataGridPresentationModel} */ presentationModel = host.presentationModel;
  this._lists = new Array();
  for (var /** @type {number} */ i = 0; i < sharedModel.columns.length; i++) {
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumn} */ dataGridColumn = org.apache.flex.utils.Language.as(sharedModel.columns[i], org.apache.flex.html.supportClasses.DataGridColumn);
    var /** @type {org.apache.flex.html.supportClasses.DataGridColumnList} */ list = new org.apache.flex.html.supportClasses.DataGridColumnList();
    list.id = "dataGridColumn" + String(i);
    list.addBead(sharedModel);
    list.itemRenderer = dataGridColumn.itemRenderer;
    list.labelField = dataGridColumn.dataField;
    list.addEventListener('change', org.apache.flex.utils.Language.closure(this.handleColumnListChange, this, 'handleColumnListChange'));
    list.addBead(presentationModel);
    if (i == 0) {
      list.className = "first";
    } else if (i == sharedModel.columns.length - 1) {
      list.className = "last";
    } else {
      list.className = "middle";
    }
    this._listArea.addElement(list);
    this._lists.push(list);
  }
  host.dispatchEvent(new org.apache.flex.events.Event("layoutNeeded"));
};


org.apache.flex.html.beads.DataGridView.prototype.get__columnLists = function() {
  return this._lists;
};


org.apache.flex.html.beads.DataGridView.prototype.get__listArea = function() {
  return this._listArea;
};


org.apache.flex.html.beads.DataGridView.prototype.get__header = function() {
  return this._header;
};


org.apache.flex.html.beads.DataGridView.prototype.set__strand = function(value) {
  org.apache.flex.html.beads.DataGridView.superClass_.set__strand.apply(this, [ value] );
  this._strand = value;
  var /** @type {org.apache.flex.html.DataGrid} */ host = org.apache.flex.utils.Language.as(value, org.apache.flex.html.DataGrid);
  this._header = new org.apache.flex.html.DataGridButtonBar();
  this._header.height = 30;
  this._header.percentWidth = 100;
  this._listArea = new org.apache.flex.html.Container();
  this._listArea.percentWidth = 100;
  this._listArea.className = "DataGridListArea";
  
  this._header.element.style["flex-grow"] = "0";
  this._header.element.style["min-height"] = "30px";
  this._listArea.element.style["flex-grow"] = "1";
  org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("beadsAdded", org.apache.flex.utils.Language.closure(this.finishSetup, this, 'finishSetup'));
};


Object.defineProperties(org.apache.flex.html.beads.DataGridView.prototype, /** @lends {org.apache.flex.html.beads.DataGridView.prototype} */ {
/** @export */
columnLists: {
get: org.apache.flex.html.beads.DataGridView.prototype.get__columnLists},
/** @export */
listArea: {
get: org.apache.flex.html.beads.DataGridView.prototype.get__listArea},
/** @export */
header: {
get: org.apache.flex.html.beads.DataGridView.prototype.get__header},
/** @export */
strand: {
set: org.apache.flex.html.beads.DataGridView.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.html.beads.DataGridView.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'DataGridView', qName: 'org.apache.flex.html.beads.DataGridView', kind: 'class' }], interfaces: [org.apache.flex.core.IBeadView] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.html.beads.DataGridView', org.apache.flex.html.beads.DataGridView);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.html.beads.DataGridView.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'columnLists': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.flex.html.beads.DataGridView'},
        'listArea': { type: 'org.apache.flex.html.Container', access: 'readonly', declaredBy: 'org.apache.flex.html.beads.DataGridView'},
        'header': { type: 'org.apache.flex.core.IUIBase', access: 'readonly', declaredBy: 'org.apache.flex.html.beads.DataGridView'},
        'strand': { type: 'org.apache.flex.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.flex.html.beads.DataGridView'}
      };
    },
    methods: function () {
      return {
        'DataGridView': { type: '', declaredBy: 'org.apache.flex.html.beads.DataGridView'}
      };
    }
  };
};