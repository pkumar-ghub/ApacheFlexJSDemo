/**
 * Generated by Apache Flex Cross-Compiler from org\apache\flex\html\beads\ContainerView.as
 * org.apache.flex.html.beads.ContainerView
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.html.beads.ContainerView');

goog.require('org.apache.flex.core.IContainer');
goog.require('org.apache.flex.core.ILayoutView');
goog.require('org.apache.flex.core.IViewport');
goog.require('org.apache.flex.core.ValuesManager');
goog.require('org.apache.flex.html.beads.GroupView');
goog.require('org.apache.flex.utils.Language');



/**
 * @constructor
 * @extends {org.apache.flex.html.beads.GroupView}
 */
org.apache.flex.html.beads.ContainerView = function() {
  org.apache.flex.html.beads.ContainerView.base(this, 'constructor');
};
goog.inherits(org.apache.flex.html.beads.ContainerView, org.apache.flex.html.beads.GroupView);


/**
 * @private
 * @type {org.apache.flex.core.IViewport}
 */
org.apache.flex.html.beads.ContainerView.prototype._viewport;


org.apache.flex.html.beads.ContainerView.prototype.get__viewport = function() {
  return this._viewport;
};


org.apache.flex.html.beads.ContainerView.prototype.get__contentView = function() {
  if (this.viewport != null) {
    return org.apache.flex.utils.Language.as(this.viewport.contentView, org.apache.flex.core.ILayoutView);
  } else {
    return org.apache.flex.utils.Language.as(this.host, org.apache.flex.core.ILayoutView);
  }
};


org.apache.flex.html.beads.ContainerView.prototype.set__strand = function(value) {
  this._strand = value;
  org.apache.flex.html.beads.ContainerView.superClass_.set__strand.apply(this, [ value] );
  var /** @type {Object} */ c;
  if (this.viewport == null) {
    this._viewport = org.apache.flex.utils.Language.as(this._strand.getBeadByType(org.apache.flex.core.IViewport), org.apache.flex.core.IViewport);
    if (this.viewport == null) {
      c = org.apache.flex.core.ValuesManager["valuesImpl"].getValue(this.host, "iViewport");
      if (c) {
        this._viewport = org.apache.flex.utils.Language.as(new c(), org.apache.flex.core.IViewport);
        this._strand.addBead(this.viewport);
      }
    }
  }
  if (this.viewport != null) {
    var /** @type {org.apache.flex.core.IContainer} */ chost = org.apache.flex.utils.Language.as(this.host, org.apache.flex.core.IContainer);
    if (chost != this.viewport.contentView) {
      chost.addElement(this.viewport.contentView);
    }
  }
};


Object.defineProperties(org.apache.flex.html.beads.ContainerView.prototype, /** @lends {org.apache.flex.html.beads.ContainerView.prototype} */ {
/** @export */
viewport: {
get: org.apache.flex.html.beads.ContainerView.prototype.get__viewport},
/** @export */
contentView: {
get: org.apache.flex.html.beads.ContainerView.prototype.get__contentView},
/** @export */
strand: {
set: org.apache.flex.html.beads.ContainerView.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.html.beads.ContainerView.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'ContainerView', qName: 'org.apache.flex.html.beads.ContainerView', kind: 'class' }] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.html.beads.ContainerView', org.apache.flex.html.beads.ContainerView);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.html.beads.ContainerView.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'contentView': { type: 'org.apache.flex.core.ILayoutView', access: 'readonly', declaredBy: 'org.apache.flex.html.beads.ContainerView'},
        'strand': { type: 'org.apache.flex.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.flex.html.beads.ContainerView'}
      };
    },
    methods: function () {return {};}
  };
};