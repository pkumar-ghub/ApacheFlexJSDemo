/**
 * Generated by Apache Flex Cross-Compiler from org\apache\flex\utils\PointUtils.as
 * org.apache.flex.utils.PointUtils
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.utils.PointUtils');

goog.require('org.apache.flex.geom.Point');
goog.require('org.apache.flex.utils.Language');



/**
 * @asprivate
 * @constructor
 */
org.apache.flex.utils.PointUtils = function() {
  throw new Error("PointUtils should not be instantiated.");
};


/**
 *  Converts a point from global coordinates to local coordinates
 * 
 *  @asparam point The point being converted.
 *  @asparam local The component used as reference for the conversion.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 *  @flexjsignorecoercion HTMLElement
 * @export
 * @param {org.apache.flex.geom.Point} pt
 * @param {Object} local
 * @return {org.apache.flex.geom.Point}
 */
org.apache.flex.utils.PointUtils.globalToLocal = function(pt, local) {
  
  var /** @type {number} */ x = pt.x;
  var /** @type {number} */ y = pt.y;
  var /** @type {HTMLElement} */ element = local.element;
  do {
    x -= element.offsetLeft;
    y -= element.offsetTop;
    if (local.hasOwnProperty('parent')) {
      local = local.parent;
      element = local.element;
    } else {
      element = null;
    }
  } while (element);
  return new org.apache.flex.geom.Point(x, y);
};


/**
 *  Converts a point from local coordinates to global coordinates
 * 
 *  @asparam point The point being converted.
 *  @asparam local The component used as reference for the conversion.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 *  @flexjsignorecoercion HTMLElement
 * @export
 * @param {org.apache.flex.geom.Point} pt
 * @param {Object} local
 * @return {org.apache.flex.geom.Point}
 */
org.apache.flex.utils.PointUtils.localToGlobal = function(pt, local) {
  
  var /** @type {number} */ x = pt.x;
  var /** @type {number} */ y = pt.y;
  var /** @type {HTMLElement} */ element = local.element;
  if (org.apache.flex.utils.Language.closure(element.getBoundingClientRect, element, 'getBoundingClientRect')) {
    var /** @type {Object} */ rect = element.getBoundingClientRect();
    x = Number(rect.left + x);
    y = Number(rect.top + y);
  } else {
    do {
      x += element.offsetLeft;
      y += element.offsetTop;
      element = element.offsetParent;
    } while (element);
  }
  return new org.apache.flex.geom.Point(x, y);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.utils.PointUtils.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'PointUtils', qName: 'org.apache.flex.utils.PointUtils', kind: 'class' }] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.utils.PointUtils', org.apache.flex.utils.PointUtils);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.utils.PointUtils.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'PointUtils': { type: '', declaredBy: 'org.apache.flex.utils.PointUtils'},
        '|globalToLocal': { type: 'org.apache.flex.geom.Point', declaredBy: 'org.apache.flex.utils.PointUtils', parameters: function () { return [  { index: 1, type: 'org.apache.flex.geom.Point', optional: false },{ index: 2, type: 'Object', optional: false } ]; }},
        '|localToGlobal': { type: 'org.apache.flex.geom.Point', declaredBy: 'org.apache.flex.utils.PointUtils', parameters: function () { return [  { index: 1, type: 'org.apache.flex.geom.Point', optional: false },{ index: 2, type: 'Object', optional: false } ]; }}
      };
    }
  };
};