/**
 * Generated by Apache Flex Cross-Compiler from org\view\MainMediator.as
 * org.view.MainMediator
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.view.MainMediator');

goog.require('MyInitialView');
goog.require('main');
goog.require('org.apache.flex.collections.ArrayList');
goog.require('org.apache.flex.events.MouseEvent');
goog.require('org.apache.flex.html.SimpleAlert');
goog.require('org.facade.MainFacade');
goog.require('org.proxy.MainProxy');
goog.require('org.puremvc.as3.multicore.patterns.mediator.Mediator');
goog.require('org.apache.flex.utils.Language');



/**
 * @constructor
 * @extends {org.puremvc.as3.multicore.patterns.mediator.Mediator}
 * @param {org.apache.flex.core.Application} viewComp
 */
org.view.MainMediator = function(viewComp) {
  
  this.profileArray = new Array();
  org.view.MainMediator.base(this, 'constructor', org.view.MainMediator.NAME, viewComp);
};
goog.inherits(org.view.MainMediator, org.puremvc.as3.multicore.patterns.mediator.Mediator);


/**
 * @export
 * @const
 * @type {string}
 */
org.view.MainMediator.NAME = 'MainMediator';


/**
 * @private
 * @type {Array}
 */
org.view.MainMediator.prototype.profileArray;


/**
 * @export
 * @override
 */
org.view.MainMediator.prototype.onRegister = function() {
  var /** @type {MyInitialView} */ mainView = org.apache.flex.utils.Language.as(this.app.initialView, MyInitialView);
  mainView.buttonId1.addEventListener(org.apache.flex.events.MouseEvent.CLICK, org.apache.flex.utils.Language.closure(this.onButtonClick, this, 'onButtonClick'));
  mainView.buttonId3.addEventListener(org.apache.flex.events.MouseEvent.CLICK, org.apache.flex.utils.Language.closure(this.onButtonClick, this, 'onButtonClick'));
};


/**
 * @private
 * @param {org.apache.flex.events.MouseEvent} evnt
 */
org.view.MainMediator.prototype.onButtonClick = function(evnt) {
  var /** @type {string} */ viewState = "default";
  if (evnt.target.id == "buttonId1")
    viewState = "editor";
  else
    viewState = "profile";
  this.proxy.setUIResult(viewState);
};


/**
 * @export
 * @override
 */
org.view.MainMediator.prototype.listNotificationInterests = function() {
  return [org.facade.MainFacade.SET_UI_RESULT];
};


/**
 * @export
 * @override
 */
org.view.MainMediator.prototype.handleNotification = function(notification) {
  var /** @type {string} */ name = notification.getName();
  var /** @type {string} */ body = org.apache.flex.utils.Language.as(notification.getBody(), String);
  var /** @type {MyInitialView} */ mainView = org.apache.flex.utils.Language.as(this.app.initialView, MyInitialView);
  mainView.currentState = body;
  if (mainView.currentState == "editor") {
    mainView.editorViewId.btnAddId.addEventListener(org.apache.flex.events.MouseEvent.CLICK, org.apache.flex.utils.Language.closure(this.onAddClick, this, 'onAddClick'));
  } else {
    mainView.profileViewId.profileGridId.dataProvider = new org.apache.flex.collections.ArrayList(this.profileArray);
  }
};


/**
 * @private
 * @param {org.apache.flex.events.MouseEvent} evt
 */
org.view.MainMediator.prototype.onAddClick = function(evt) {
  var /** @type {MyInitialView} */ mainView = org.apache.flex.utils.Language.as(this.app.initialView, MyInitialView);
  var /** @type {Object} */ tempObj = new Object();
  tempObj.id = mainView.editorViewId.txtId.text;
  tempObj.name = mainView.editorViewId.txtName.text;
  tempObj.company = mainView.editorViewId.txtComp.text;
  tempObj.doj = mainView.editorViewId.dojId.selectedDate.toString();
  this.profileArray.push(tempObj);
  org.apache.flex.html.SimpleAlert.show("Profile added", this.app);
};


org.view.MainMediator.prototype.get__app = function() {
  return org.apache.flex.utils.Language.as(this.viewComponent, main);
};


org.view.MainMediator.prototype.get__proxy = function() {
  return org.apache.flex.utils.Language.as(this.facade.retrieveProxy(org.proxy.MainProxy.NAME), org.proxy.MainProxy);
};


Object.defineProperties(org.view.MainMediator.prototype, /** @lends {org.view.MainMediator.prototype} */ {
/** @export */
app: {
get: org.view.MainMediator.prototype.get__app},
/** @export */
proxy: {
get: org.view.MainMediator.prototype.get__proxy}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.view.MainMediator.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'MainMediator', qName: 'org.view.MainMediator', kind: 'class' }] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.view.MainMediator', org.view.MainMediator);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.view.MainMediator.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'MainMediator': { type: '', declaredBy: 'org.view.MainMediator', parameters: function () { return [  { index: 1, type: 'org.apache.flex.core.Application', optional: false } ]; }},
        'onRegister': { type: 'void', declaredBy: 'org.view.MainMediator'},
        'listNotificationInterests': { type: 'Array', declaredBy: 'org.view.MainMediator'},
        'handleNotification': { type: 'void', declaredBy: 'org.view.MainMediator', parameters: function () { return [  { index: 1, type: 'org.puremvc.as3.multicore.interfaces.INotification', optional: false } ]; }}
      };
    }
  };
};