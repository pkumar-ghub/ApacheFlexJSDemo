/**
 * Generated by Apache Flex Cross-Compiler from org/apache/flex/svg/GraphicShape.as
 * org.apache.flex.svg.GraphicShape
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.svg.GraphicShape');

goog.require('org.apache.flex.core.UIBase');
goog.require('org.apache.flex.graphics.IGraphicShape');



/**
 * Constructor
 *
 * @flexjsignorecoercion org.apache.flex.core.WrappedHTMLElement
 * @constructor
 * @extends {org.apache.flex.core.UIBase}
 * @implements {org.apache.flex.graphics.IGraphicShape}
 */
org.apache.flex.svg.GraphicShape = function() {
  org.apache.flex.svg.GraphicShape.base(this, 'constructor');
};
goog.inherits(org.apache.flex.svg.GraphicShape, org.apache.flex.core.UIBase);


/**
 * @private
 * @type {org.apache.flex.graphics.IFill}
 */
org.apache.flex.svg.GraphicShape.prototype._fill;


/**
 * @private
 * @type {org.apache.flex.graphics.IStroke}
 */
org.apache.flex.svg.GraphicShape.prototype._stroke;


/**
 * @flexjsignorecoercion org.apache.flex.core.WrappedHTMLElement
 * @protected
 * @override
 */
org.apache.flex.svg.GraphicShape.prototype.createElement = function() {
  this.element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  this.element.flexjs_wrapper = this;
  this.positioner = this.element;
  return this.element;
};


/**
 * @asprivate
 * @flexjsignorecoercion SVGRect
 * @protected
 * @param {org.apache.flex.core.WrappedHTMLElement} svgElement
 * @return {Object}
 */
org.apache.flex.svg.GraphicShape.prototype.getBBox = function(svgElement) {
  try {
    return svgElement['getBBox']();
  } catch (err) {
    return {x:0, y:0, width:this.width, height:this.height};
  }
};


/**
 * This is where the drawing methods get called from
 * @protected
 */
org.apache.flex.svg.GraphicShape.prototype.drawImpl = function() {
};


/**
 * @export
 * @override
 */
org.apache.flex.svg.GraphicShape.prototype.addedToParent = function() {
  org.apache.flex.svg.GraphicShape.superClass_.addedToParent.apply(this);
  this.drawImpl();
  this.element.style.overflow = 'visible';
};


/**
 * @asreturn {string} The style attribute.
 * @export
 * @return {string}
 */
org.apache.flex.svg.GraphicShape.prototype.getStyleStr = function() {
  var /** @type {string} */ fillStr;
  if (this.fill) {
    fillStr = this.fill.addFillAttrib(this);
  } else {
    fillStr = 'fill:none';
  }
  var /** @type {string} */ strokeStr;
  if (this.stroke) {
    strokeStr = this.stroke.addStrokeAttrib(this);
  } else {
    strokeStr = 'stroke:none';
  }
  return fillStr + ';' + strokeStr;
};


/**
 * @protected
 * @override
 */
org.apache.flex.svg.GraphicShape.prototype.setClassName = function(value) {
  this.element.setAttribute('class', value);
};


/**
 * @asparam x X position.
 * @asparam y Y position.
 * @asparam bbox The bounding box of the svg element.
 * @export
 * @param {number} x
 * @param {number} y
 * @param {Object} bbox
 */
org.apache.flex.svg.GraphicShape.prototype.resize = function(x, y, bbox) {
  var /** @type {number} */ useWidth = Math.max(this.width, bbox.width);
  var /** @type {number} */ useHeight = Math.max(this.height, bbox.height);
  this.element.style.position = 'absolute';
  if (!isNaN(x))
    this.element.style.top = x + "px";
  if (!isNaN(y))
    this.element.style.left = y + "px";
  this.element.style.width = useWidth;
  this.element.style.height = useHeight;
  this.element.setAttribute("x", x);
  this.element.setAttribute("y", y);
  this.element.style.left = x + "px";
  this.element.style.top = y + "px";
};


/**
 * @private
 * @type {number}
 */
org.apache.flex.svg.GraphicShape.prototype._x;


/**
 * @private
 * @type {number}
 */
org.apache.flex.svg.GraphicShape.prototype._y;


/**
 * @private
 * @type {number}
 */
org.apache.flex.svg.GraphicShape.prototype._xOffset;


/**
 * @private
 * @type {number}
 */
org.apache.flex.svg.GraphicShape.prototype._yOffset;


/**
 * @asparam x X position.
 * @asparam y Y position.
 * @asparam xOffset offset from x position.
 * @asparam yOffset offset from y position.
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} xOffset
 * @param {number} yOffset
 */
org.apache.flex.svg.GraphicShape.prototype.setPosition = function(x, y, xOffset, yOffset) {
  this._x = x;
  this._y = y;
  this._xOffset = xOffset;
  this._yOffset = yOffset;
  this.element.setAttribute("x", xOffset);
  this.element.setAttribute("y", yOffset);
  this.element.style.left = xOffset + "px";
  this.element.style.top = yOffset + "px";
};


org.apache.flex.svg.GraphicShape.prototype.get__stroke = function() {
  return this._stroke;
};


org.apache.flex.svg.GraphicShape.prototype.set__stroke = function(value) {
  this._stroke = value;
};


org.apache.flex.svg.GraphicShape.prototype.get__fill = function() {
  return this._fill;
};


org.apache.flex.svg.GraphicShape.prototype.set__fill = function(value) {
  this._fill = value;
};


Object.defineProperties(org.apache.flex.svg.GraphicShape.prototype, /** @lends {org.apache.flex.svg.GraphicShape.prototype} */ {
/** @export */
stroke: {
get: org.apache.flex.svg.GraphicShape.prototype.get__stroke,
set: org.apache.flex.svg.GraphicShape.prototype.set__stroke},
/** @export */
fill: {
get: org.apache.flex.svg.GraphicShape.prototype.get__fill,
set: org.apache.flex.svg.GraphicShape.prototype.set__fill}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.svg.GraphicShape.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'GraphicShape', qName: 'org.apache.flex.svg.GraphicShape', kind: 'class' }], interfaces: [org.apache.flex.graphics.IGraphicShape] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.svg.GraphicShape', org.apache.flex.svg.GraphicShape);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.svg.GraphicShape.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'stroke': { type: 'org.apache.flex.graphics.IStroke', access: 'readwrite', declaredBy: 'org.apache.flex.svg.GraphicShape'},
        'fill': { type: 'org.apache.flex.graphics.IFill', access: 'readwrite', declaredBy: 'org.apache.flex.svg.GraphicShape'}
      };
    },
    methods: function () {
      return {
        'GraphicShape': { type: '', declaredBy: 'org.apache.flex.svg.GraphicShape'},
        'addedToParent': { type: 'void', declaredBy: 'org.apache.flex.svg.GraphicShape'},
        'getStyleStr': { type: 'String', declaredBy: 'org.apache.flex.svg.GraphicShape'},
        'resize': { type: 'void', declaredBy: 'org.apache.flex.svg.GraphicShape', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Object', optional: false } ]; }},
        'setPosition': { type: 'void', declaredBy: 'org.apache.flex.svg.GraphicShape', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false },{ index: 4, type: 'Number', optional: false } ]; }}
      };
    }
  };
};