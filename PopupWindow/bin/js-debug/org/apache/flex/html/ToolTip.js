/**
 * Generated by Apache Flex Cross-Compiler from org/apache/flex/html/ToolTip.as
 * org.apache.flex.html.ToolTip
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.html.ToolTip');

goog.require('org.apache.flex.html.Label');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @constructor
 * @extends {org.apache.flex.html.Label}
 */
org.apache.flex.html.ToolTip = function() {
  org.apache.flex.html.ToolTip.base(this, 'constructor');
  this.className = "ToolTip";
};
goog.inherits(org.apache.flex.html.ToolTip, org.apache.flex.html.Label);


/**
 * @flexjsignorecoercion org.apache.flex.core.WrappedHTMLElement
 * @protected
 * @override
 */
org.apache.flex.html.ToolTip.prototype.createElement = function() {
  var /** @type {Object} */ e = org.apache.flex.html.ToolTip.superClass_.createElement.apply(this);
  this.positioner.style.position = 'absolute';
  this.typeNames = "ToolTIp";
  return e;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.html.ToolTip.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'ToolTip', qName: 'org.apache.flex.html.ToolTip', kind: 'class' }] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.html.ToolTip', org.apache.flex.html.ToolTip);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.html.ToolTip.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'ToolTip': { type: '', declaredBy: 'org.apache.flex.html.ToolTip'}
      };
    }
  };
};