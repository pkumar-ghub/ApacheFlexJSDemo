/**
 * Generated by Apache Flex Cross-Compiler from org/apache/flex/events/Event.as
 * org.apache.flex.events.Event
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.flex.events.Event');

goog.require('goog.events.Event');
goog.require('org.apache.flex.core.IFlexJSElement');
goog.require('org.apache.flex.events.IFlexJSEvent');
goog.require('org.apache.flex.utils.Language');



/**
 * @constructor
 * @extends {goog.events.Event}
 * @implements {org.apache.flex.events.IFlexJSEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 */
org.apache.flex.events.Event = function(type, bubbles, cancelable) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  org.apache.flex.events.Event.base(this, 'constructor', type);
  this.bubbles = true;
  this.cancelable = true;
};
goog.inherits(org.apache.flex.events.Event, goog.events.Event);


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.flex.events.Event.CHANGE = "change";


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.flex.events.Event.COMPLETE = "complete";


/**
 * @export
 * @type {boolean}
 */
org.apache.flex.events.Event.prototype.bubbles;


/**
 * @export
 * @type {boolean}
 */
org.apache.flex.events.Event.prototype.cancelable;


/**
 * Google Closure doesn't seem to support stopImmediatePropagation, but
 * actually the ElementWrapper fireListener override sends a
 * BrowserEvent in most/all cases where folks need stopImmediatePropagation
 * so we put this in here for compile time since it will exist in
 * the BrowserEvent that does get sent around.
 * @export
 */
org.apache.flex.events.Event.prototype.stopImmediatePropagation = function() {
  throw new Error("stopImmediatePropagation");
};


/**
 * @export
 * @return {org.apache.flex.events.IFlexJSEvent}
 */
org.apache.flex.events.Event.prototype.cloneEvent = function() {
  return new org.apache.flex.events.Event(this.type, this.bubbles, this.cancelable);
};


/**
 * @export
 * @return {boolean}
 */
org.apache.flex.events.Event.prototype.isDefaultPrevented = function() {
  return this.defaultPrevented;
};


/**
 * Determine if the target is the same as the event's target.  The event's target
 * can sometimes be an internal target so this tests if the outer component
 * matches the potential target
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion FlexJS 0.0
 * @flexjsignorecoercion Object
 * @export
 * @param {org.apache.flex.events.IEventDispatcher} potentialTarget
 * @return {boolean}
 */
org.apache.flex.events.Event.prototype.isSameTarget = function(potentialTarget) {
  if (potentialTarget === this.target)
    return true;
  if (org.apache.flex.utils.Language.is(this.target, org.apache.flex.core.IFlexJSElement))
    if (this.target.flexjs_wrapper === potentialTarget)
      return true;
  return false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.events.Event.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Event', qName: 'org.apache.flex.events.Event', kind: 'class' }], interfaces: [org.apache.flex.events.IFlexJSEvent] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.flex.events.Event', org.apache.flex.events.Event);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.flex.events.Event.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'bubbles': { type: 'Boolean'},
        'cancelable': { type: 'Boolean'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'Event': { type: '', declaredBy: 'org.apache.flex.events.Event', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Boolean', optional: true },{ index: 3, type: 'Boolean', optional: true } ]; }},
        'stopImmediatePropagation': { type: 'void', declaredBy: 'org.apache.flex.events.Event'},
        'cloneEvent': { type: 'org.apache.flex.events.IFlexJSEvent', declaredBy: 'org.apache.flex.events.Event'},
        'isDefaultPrevented': { type: 'Boolean', declaredBy: 'org.apache.flex.events.Event'},
        'isSameTarget': { type: 'Boolean', declaredBy: 'org.apache.flex.events.Event', parameters: function () { return [  { index: 1, type: 'org.apache.flex.events.IEventDispatcher', optional: false } ]; }}
      };
    }
  };
};